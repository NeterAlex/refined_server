// Code generated by hertz generator.

package post

import (
	"Refined_service/biz/dal/sqlite"
	"Refined_service/biz/model/post"
	"context"
	"net/http"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UpdatePost .
// @Summary 更新文章
// @Produce json
// @Param title body string true "标题"
// @Param content body string true "md内容"
// @Param author body string true "作者"
// @Param date body string true "日期(YYYY-MM-DD)"
// @Param tags body string true "标签(,分隔)"
// @Param image_url body string true "头图url"
// @router /v1/post/update/:id [PUT]
func UpdatePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.UpdatePostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, &post.UpdatePostResponse{Code: post.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	p := &post.Post{}
	p.Content = req.Content
	p.Title = req.Title
	p.Author = req.Author
	p.Date = req.Date
	p.Tags = req.Tags
	p.ImageURL = req.ImageURL

	if err = sqlite.Update[post.Post](p.ID, p); err != nil {
		c.JSON(http.StatusOK, &post.UpdatePostResponse{Code: post.Code_DbError, Msg: err.Error()})
		return
	}
	c.JSON(http.StatusOK, &post.UpdatePostResponse{Code: post.Code_Success})
}

// DeletePost .
// @Summary 删除文章
// @Param id path string true "文章id"
// @router /v1/post/delete/:id [DELETE]
func DeletePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.DeletePostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &post.DeletePostResponse{Code: post.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	if err = sqlite.Delete[post.Post](req.ID); err != nil {
		c.JSON(consts.StatusOK, &post.DeletePostResponse{Code: post.Code_DbError, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, post.DeletePostResponse{Code: post.Code_Success})
}

// QueryPost .
// @Summary 查询文章
// @Param id query string false "文章id(可选)"
// @Param page query string true "页码"
// @Param page_size query string true "页面大小"
// @router /v1/post/query/ [GET]
func QueryPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.QueryPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &post.QueryPostResponse{Code: post.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	var posts []*post.Post
	var total int64
	if req.ID == "0" {
		posts, total, err = sqlite.QueryAll[post.Post](req.Page, req.PageSize)
	} else {
		posts, total, err = sqlite.QueryBasic[post.Post]("id = ?", req.ID)
	}
	if err != nil {
		c.JSON(consts.StatusOK, &post.QueryPostResponse{Code: post.Code_DbError, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, &post.QueryPostResponse{Code: post.Code_Success, Posts: posts, Total: total})
}

// CreatePost .
// @Summary 创建文章
// @Produce json
// @Param title body string true "标题"
// @Param content body string true "md内容"
// @Param author body string true "作者"
// @Param date body string true "日期(YYYY-MM-DD)"
// @Param tags body string true "标签(,分隔)"
// @Param image_url body string true "头图url"
// @router /v1/post/create/ [POST]
func CreatePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.CreatePostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &post.CreatePostResponse{Code: post.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	if err = sqlite.Create[post.Post]([]*post.Post{
		{
			Title:    req.Title,
			Content:  req.Content,
			Author:   req.Author,
			Date:     req.Date,
			Tags:     req.Tags,
			ImageURL: req.ImageURL,
			Viewed:   0,
			UserID:   1,
		},
	}); err != nil {
		c.JSON(consts.StatusOK, &post.CreatePostResponse{Code: post.Code_DbError, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, post.CreatePostResponse{Code: post.Code_Success})
}

// ViewPost .
// @Summary 增加浏览量
// @Param id path string true "文章id"
// @router /v1/post/view/:id [GET]
func ViewPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.ViewPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &post.ViewPostResponse{Code: post.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	if err = sqlite.CountPlus[post.Post]("id = ?", strconv.FormatInt(req.ID, 10), "viewed", 1); err != nil {
		c.JSON(consts.StatusOK, &post.ViewPostResponse{Code: post.Code_DbError, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, &post.ViewPostResponse{Code: post.Code_Success})
}

// LatestPost .
// @router v1/post/query/latest [GET]
func LatestPost(ctx context.Context, c *app.RequestContext) {
	var res []*post.Post
	var err error
	if res, err = sqlite.QueryByOrder[post.Post]("id", "desc", 1); err != nil {
		c.JSON(consts.StatusOK, &post.LatestPostResponse{Code: post.Code_DbError, Msg: err.Error()})
		return
	}
	c.JSON(consts.StatusOK, &post.LatestPostResponse{Code: post.Code_Success, Post: res[0]})
}
